"use strict";

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

var _transactions = require("../transactions");

var _elementsInteractions = require("../helpers/elements-interactions");

var _debug = require("../helpers/debug");

var _transactions2 = require("../helpers/transactions");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.getDebug)('beyahadBishvilha');
const DATE_FORMAT = 'DD/MM/YY';
const LOGIN_URL = 'https://www.hist.org.il/login';
const SUCCESS_URL = 'https://www.hist.org.il/';
const CARD_URL = 'https://www.hist.org.il/card/balanceAndUses';

function getAmountData(amountStr) {
  const amountStrCln = amountStr.replace(',', '');
  let currency = null;
  let amount = null;

  if (amountStrCln.includes(_constants.SHEKEL_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.SHEKEL_CURRENCY_SYMBOL, ''));
    currency = _constants.SHEKEL_CURRENCY;
  } else if (amountStrCln.includes(_constants.DOLLAR_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.DOLLAR_CURRENCY_SYMBOL, ''));
    currency = _constants.DOLLAR_CURRENCY;
  } else if (amountStrCln.includes(_constants.EURO_CURRENCY_SYMBOL)) {
    amount = parseFloat(amountStrCln.replace(_constants.EURO_CURRENCY_SYMBOL, ''));
    currency = _constants.EURO_CURRENCY;
  } else {
    const parts = amountStrCln.split(' ');
    [currency] = parts;
    amount = parseFloat(parts[1]);
  }

  return {
    amount,
    currency
  };
}

function convertTransactions(txns) {
  debug(`convert ${txns.length} raw transactions to official Transaction structure`);
  return txns.map(txn => {
    const chargedAmountTuple = getAmountData(txn.chargedAmount || '');
    const txnProcessedDate = (0, _moment.default)(txn.date, DATE_FORMAT);
    const result = {
      type: _transactions.TransactionTypes.Normal,
      status: _transactions.TransactionStatuses.Completed,
      date: txnProcessedDate.toISOString(),
      processedDate: txnProcessedDate.toISOString(),
      originalAmount: chargedAmountTuple.amount,
      originalCurrency: chargedAmountTuple.currency,
      chargedAmount: chargedAmountTuple.amount,
      chargedCurrency: chargedAmountTuple.currency,
      description: txn.description || '',
      memo: '',
      identifier: txn.identifier
    };
    return result;
  });
}

async function fetchTransactions(page, options) {
  await page.goto(CARD_URL);
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.react-loading.hide', false);
  const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
  const startDate = options.startDate || defaultStartMoment.toDate();

  const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

  const accountNumber = await (0, _elementsInteractions.pageEval)(page, '.wallet-details div:nth-of-type(2)', null, element => {
    return element.innerText.replace('מספר כרטיס ', '');
  });
  const balance = await (0, _elementsInteractions.pageEval)(page, '.wallet-details div:nth-of-type(4) > span:nth-of-type(2)', null, element => {
    return element.innerText;
  });
  debug('fetch raw transactions from page');
  const rawTransactions = await (0, _elementsInteractions.pageEvalAll)(page, '.transaction-container, .transaction-component-container', [], items => {
    return items.map(el => {
      const columns = el.querySelectorAll('.transaction-item > span');

      if (columns.length === 7) {
        return {
          date: columns[0].innerText,
          identifier: columns[1].innerText,
          description: columns[3].innerText,
          type: columns[5].innerText,
          chargedAmount: columns[6].innerText
        };
      }

      return null;
    });
  });
  debug(`fetched ${rawTransactions.length} raw transactions from page`);
  const accountTransactions = convertTransactions(rawTransactions.filter(item => !!item));
  debug('filer out old transactions');
  const txns = (0, _transactions2.filterOldTransactions)(accountTransactions, startMoment, false);
  debug(`found ${txns.length} valid transactions out of ${accountTransactions.length} transactions for account ending with ${accountNumber.substring(accountNumber.length - 2)}`);
  return {
    accountNumber,
    balance: getAmountData(balance).amount,
    txns
  };
}

function getPossibleLoginResults() {
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [SUCCESS_URL];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = []; // TODO

  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = []; // TODO

  urls[_baseScraperWithBrowser.LoginResults.UnknownError] = []; // TODO

  return urls;
}

function createLoginFields(credentials) {
  return [{
    selector: '#loginId',
    value: credentials.id
  }, {
    selector: '#loginPassword',
    value: credentials.password
  }];
}

class BeyahadBishvilhaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getViewPort() {
    return {
      width: 1500,
      height: 800
    };
  }

  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector: async () => {
        const [button] = await this.page.$x("//button[contains(., 'התחבר')]");

        if (button) {
          await button.click();
        }
      },
      possibleResults: getPossibleLoginResults()
    };
  }

  async fetchData() {
    const account = await fetchTransactions(this.page, this.options);
    return {
      success: true,
      accounts: [account]
    };
  }

}

var _default = BeyahadBishvilhaScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,