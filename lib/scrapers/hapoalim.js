"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

var _navigation = require("../helpers/navigation");

var _waiting = require("../helpers/waiting");

var _fetch = require("../helpers/fetch");

var _transactions = require("../transactions");

var _debug = require("../helpers/debug");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.getDebug)('hapoalim');
const DATE_FORMAT = 'YYYYMMDD'; // eslint-disable-next-line @typescript-eslint/no-namespace

function convertTransactions(txns) {
  return txns.map(txn => {
    const isOutbound = txn.eventActivityTypeCode === 2;
    let memo = '';

    if (txn.beneficiaryDetailsData) {
      const {
        partyHeadline,
        partyName,
        messageHeadline,
        messageDetail
      } = txn.beneficiaryDetailsData;
      const memoLines = [];

      if (partyHeadline) {
        memoLines.push(partyHeadline);
      }

      if (partyName) {
        memoLines.push(`${partyName}.`);
      }

      if (messageHeadline) {
        memoLines.push(messageHeadline);
      }

      if (messageDetail) {
        memoLines.push(`${messageDetail}.`);
      }

      if (memoLines.length) {
        memo = memoLines.join(' ');
      }
    }

    const result = {
      type: _transactions.TransactionTypes.Normal,
      identifier: txn.referenceNumber,
      date: (0, _moment.default)(txn.eventDate, DATE_FORMAT).toISOString(),
      processedDate: (0, _moment.default)(txn.valueDate, DATE_FORMAT).toISOString(),
      originalAmount: isOutbound ? -txn.eventAmount : txn.eventAmount,
      originalCurrency: 'ILS',
      chargedAmount: isOutbound ? -txn.eventAmount : txn.eventAmount,
      description: txn.activityDescription || '',
      status: txn.serialNumber === 0 ? _transactions.TransactionStatuses.Pending : _transactions.TransactionStatuses.Completed,
      memo
    };
    return result;
  });
}

async function getRestContext(page) {
  await (0, _waiting.waitUntil)(async () => {
    return page.evaluate(() => !!window.bnhpApp);
  }, 'waiting for app data load');
  const result = await page.evaluate(() => {
    return window.bnhpApp.restContext;
  });
  return result.slice(1);
}

async function fetchPoalimXSRFWithinPage(page, url, pageUuid) {
  const cookies = await page.cookies();
  const XSRFCookie = cookies.find(cookie => cookie.name === 'XSRF-TOKEN');
  const headers = {};

  if (XSRFCookie != null) {
    headers['X-XSRF-TOKEN'] = XSRFCookie.value;
  }

  headers.pageUuid = pageUuid;
  headers.uuid = (0, _v.default)();
  headers['Content-Type'] = 'application/json;charset=UTF-8';
  return (0, _fetch.fetchPostWithinPage)(page, url, [], headers);
}

async function getAccountTransactions(apiSiteUrl, page, accountNumber, startDate, endDate) {
  var _txnsResult$transacti;

  const txnsUrl = `${apiSiteUrl}/current-account/transactions?accountId=${accountNumber}&numItemsPerPage=150&retrievalEndDate=${endDate}&retrievalStartDate=${startDate}&sortCode=1`;
  const txnsResult = await fetchPoalimXSRFWithinPage(page, txnsUrl, '/current-account/transactions');
  return convertTransactions((_txnsResult$transacti = txnsResult === null || txnsResult === void 0 ? void 0 : txnsResult.transactions) !== null && _txnsResult$transacti !== void 0 ? _txnsResult$transacti : []);
}

async function getAccountBalance(apiSiteUrl, page, accountNumber) {
  const balanceAndCreditLimitUrl = `${apiSiteUrl}/current-account/composite/balanceAndCreditLimit?accountId=${accountNumber}&view=details&lang=he`;
  const balanceAndCreditLimit = await (0, _fetch.fetchGetWithinPage)(page, balanceAndCreditLimitUrl);
  return balanceAndCreditLimit === null || balanceAndCreditLimit === void 0 ? void 0 : balanceAndCreditLimit.currentBalance;
}

async function fetchAccountData(page, baseUrl, options) {
  const restContext = await getRestContext(page);
  const apiSiteUrl = `${baseUrl}/${restContext}`;
  const accountDataUrl = `${baseUrl}/ServerServices/general/accounts`;
  debug('fetching accounts data');
  const accountsInfo = (await (0, _fetch.fetchGetWithinPage)(page, accountDataUrl)) || [];
  debug('got %d accounts, fetching txns and balance', accountsInfo.length);
  const startMoment = (0, _moment.default)(options.startDate);
  const endMoment = (0, _moment.default)(options.endDate);
  const startDateStr = startMoment.format(DATE_FORMAT);
  const endDateStr = endMoment.format(DATE_FORMAT);
  const accounts = [];

  for (const account of accountsInfo) {
    let balance;
    const accountNumber = `${account.bankNumber}-${account.branchNumber}-${account.accountNumber}`;
    const isActiveAccount = account.accountClosingReasonCode === 0;

    if (isActiveAccount) {
      balance = await getAccountBalance(apiSiteUrl, page, accountNumber);
    } else {
      debug('Skipping balance for a closed account, balance will be undefined');
    }

    const txns = await getAccountTransactions(apiSiteUrl, page, accountNumber, startDateStr, endDateStr);
    accounts.push({
      accountNumber,
      balance,
      txns
    });
  }

  const accountData = {
    success: true,
    accounts
  };
  debug('fetching ended');
  return accountData;
}

function getPossibleLoginResults(baseUrl) {
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [`${baseUrl}/portalserver/HomePage`, `${baseUrl}/ng-portals-bt/rb/he/homepage`, `${baseUrl}/ng-portals/rb/he/homepage`];
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [`${baseUrl}/AUTHENTICATE/LOGON?flow=AUTHENTICATE&state=LOGON&errorcode=1.6&callme=false`];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = [`${baseUrl}/MCP/START?flow=MCP&state=START&expiredDate=null`, /\/ABOUTTOEXPIRE\/START/i];
  return urls;
}

function createLoginFields(credentials) {
  return [{
    selector: '#userCode',
    value: credentials.userCode
  }, {
    selector: '#password',
    value: credentials.password
  }];
}

class HapoalimScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  // eslint-disable-next-line class-methods-use-this
  get baseUrl() {
    return 'https://login.bankhapoalim.co.il';
  }

  getLoginOptions(credentials) {
    return {
      loginUrl: `${this.baseUrl}/cgi-bin/poalwwwc?reqName=getLogonPage`,
      fields: createLoginFields(credentials),
      submitButtonSelector: '.login-btn',
      postAction: async () => (0, _navigation.waitForRedirect)(this.page),
      possibleResults: getPossibleLoginResults(this.baseUrl)
    };
  }

  async fetchData() {
    return fetchAccountData(this.page, this.baseUrl, this.options);
  }

}

var _default = HapoalimScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JhcGVycy9oYXBvYWxpbS50cyJdLCJuYW1lcyI6WyJkZWJ1ZyIsIkRBVEVfRk9STUFUIiwiY29udmVydFRyYW5zYWN0aW9ucyIsInR4bnMiLCJtYXAiLCJ0eG4iLCJpc091dGJvdW5kIiwiZXZlbnRBY3Rpdml0eVR5cGVDb2RlIiwibWVtbyIsImJlbmVmaWNpYXJ5RGV0YWlsc0RhdGEiLCJwYXJ0eUhlYWRsaW5lIiwicGFydHlOYW1lIiwibWVzc2FnZUhlYWRsaW5lIiwibWVzc2FnZURldGFpbCIsIm1lbW9MaW5lcyIsInB1c2giLCJsZW5ndGgiLCJqb2luIiwicmVzdWx0IiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJpZGVudGlmaWVyIiwicmVmZXJlbmNlTnVtYmVyIiwiZGF0ZSIsImV2ZW50RGF0ZSIsInRvSVNPU3RyaW5nIiwicHJvY2Vzc2VkRGF0ZSIsInZhbHVlRGF0ZSIsIm9yaWdpbmFsQW1vdW50IiwiZXZlbnRBbW91bnQiLCJvcmlnaW5hbEN1cnJlbmN5IiwiY2hhcmdlZEFtb3VudCIsImRlc2NyaXB0aW9uIiwiYWN0aXZpdHlEZXNjcmlwdGlvbiIsInN0YXR1cyIsInNlcmlhbE51bWJlciIsIlRyYW5zYWN0aW9uU3RhdHVzZXMiLCJQZW5kaW5nIiwiQ29tcGxldGVkIiwiZ2V0UmVzdENvbnRleHQiLCJwYWdlIiwiZXZhbHVhdGUiLCJ3aW5kb3ciLCJibmhwQXBwIiwicmVzdENvbnRleHQiLCJzbGljZSIsImZldGNoUG9hbGltWFNSRldpdGhpblBhZ2UiLCJ1cmwiLCJwYWdlVXVpZCIsImNvb2tpZXMiLCJYU1JGQ29va2llIiwiZmluZCIsImNvb2tpZSIsIm5hbWUiLCJoZWFkZXJzIiwidmFsdWUiLCJ1dWlkIiwiZ2V0QWNjb3VudFRyYW5zYWN0aW9ucyIsImFwaVNpdGVVcmwiLCJhY2NvdW50TnVtYmVyIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInR4bnNVcmwiLCJ0eG5zUmVzdWx0IiwidHJhbnNhY3Rpb25zIiwiZ2V0QWNjb3VudEJhbGFuY2UiLCJiYWxhbmNlQW5kQ3JlZGl0TGltaXRVcmwiLCJiYWxhbmNlQW5kQ3JlZGl0TGltaXQiLCJjdXJyZW50QmFsYW5jZSIsImZldGNoQWNjb3VudERhdGEiLCJiYXNlVXJsIiwib3B0aW9ucyIsImFjY291bnREYXRhVXJsIiwiYWNjb3VudHNJbmZvIiwic3RhcnRNb21lbnQiLCJlbmRNb21lbnQiLCJzdGFydERhdGVTdHIiLCJmb3JtYXQiLCJlbmREYXRlU3RyIiwiYWNjb3VudHMiLCJhY2NvdW50IiwiYmFsYW5jZSIsImJhbmtOdW1iZXIiLCJicmFuY2hOdW1iZXIiLCJpc0FjdGl2ZUFjY291bnQiLCJhY2NvdW50Q2xvc2luZ1JlYXNvbkNvZGUiLCJhY2NvdW50RGF0YSIsInN1Y2Nlc3MiLCJnZXRQb3NzaWJsZUxvZ2luUmVzdWx0cyIsInVybHMiLCJMb2dpblJlc3VsdHMiLCJTdWNjZXNzIiwiSW52YWxpZFBhc3N3b3JkIiwiQ2hhbmdlUGFzc3dvcmQiLCJjcmVhdGVMb2dpbkZpZWxkcyIsImNyZWRlbnRpYWxzIiwic2VsZWN0b3IiLCJ1c2VyQ29kZSIsInBhc3N3b3JkIiwiSGFwb2FsaW1TY3JhcGVyIiwiQmFzZVNjcmFwZXJXaXRoQnJvd3NlciIsImdldExvZ2luT3B0aW9ucyIsImxvZ2luVXJsIiwiZmllbGRzIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJwb3N0QWN0aW9uIiwicG9zc2libGVSZXN1bHRzIiwiZmV0Y2hEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUlBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLHFCQUFTLFVBQVQsQ0FBZDtBQUVBLE1BQU1DLFdBQVcsR0FBRyxVQUFwQixDLENBRUE7O0FBNkNBLFNBQVNDLG1CQUFULENBQTZCQyxJQUE3QixFQUF3RTtBQUN0RSxTQUFPQSxJQUFJLENBQUNDLEdBQUwsQ0FBVUMsR0FBRCxJQUFTO0FBQ3ZCLFVB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QUFRLEVBQUUsV0FBWjtBQUF5QnpDLElBQUFBLEtBQUssRUFBRXdDLFdBQVcsQ0FBQ0U7QUFBNUMsR0FESyxFQUVMO0FBQUVELElBQUFBLFFBQVEsRUFBRSxXQUFaO0FBQXlCekMsSUFBQUEsS0FBSyxFQUFFd0MsV0FBVyxDQUFDRztBQUE1QyxHQUZLLENBQVA7QUFJRDs7QUFFRCxNQUFNQyxlQUFOLFNBQThCQyw4Q0FBOUIsQ0FBcUQ7QUFDbkQ7QUFDQSxNQUFJOUIsT0FBSixHQUFjO0FBQ1osV0FBTyxrQ0FBUDtBQUNEOztBQUVEK0IsRUFBQUEsZUFBZSxDQUFDTixXQUFELEVBQWtDO0FBQy9DLFdBQU87QUFDTE8sTUFBQUEsUUFBUSxFQUFHLEdBQUUsS0FBS2hDLE9BQVEsd0NBRHJCO0FBRUxpQyxNQUFBQSxNQUFNLEVBQUVULGlCQUFpQixDQUFDQyxXQUFELENBRnBCO0FBR0xTLE1BQUFBLG9CQUFvQixFQUFFLFlBSGpCO0FBSUxDLE1BQUFBLFVBQVUsRUFBRSxZQUFZLGlDQUFnQixLQUFLakUsSUFBckIsQ0FKbkI7QUFLTGtFLE1BQUFBLGVBQWUsRUFBRWxCLHVCQUF1QixDQUFDLEtBQUtsQixPQUFOO0FBTG5DLEtBQVA7QUFPRDs7QUFFRCxRQUFNcUMsU0FBTixHQUFrQjtBQUNoQixXQUFPdEMsZ0JBQWdCLENBQUMsS0FBSzdCLElBQU4sRUFBWSxLQUFLOEIsT0FBakIsRUFBMEIsS0FBS0MsT0FBL0IsQ0FBdkI7QUFDRDs7QUFsQmtEOztlQXFCdEM0QixlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHV1aWQ0IGZyb20gJ3V1aWQvdjQnO1xuXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAncHVwcGV0ZWVyJztcbmltcG9ydCB7IEJhc2VTY3JhcGVyV2l0aEJyb3dzZXIsIExvZ2luUmVzdWx0cywgUG9zc2libGVMb2dpblJlc3VsdHMgfSBmcm9tICcuL2Jhc2Utc2NyYXBlci13aXRoLWJyb3dzZXInO1xuaW1wb3J0IHsgd2FpdEZvclJlZGlyZWN0IH0gZnJvbSAnLi4vaGVscGVycy9uYXZpZ2F0aW9uJztcbmltcG9ydCB7IHdhaXRVbnRpbCB9IGZyb20gJy4uL2hlbHBlcnMvd2FpdGluZyc7XG5pbXBvcnQgeyBmZXRjaEdldFdpdGhpblBhZ2UsIGZldGNoUG9zdFdpdGhpblBhZ2UgfSBmcm9tICcuLi9oZWxwZXJzL2ZldGNoJztcbmltcG9ydCB7XG4gIFRyYW5zYWN0aW9uc0FjY291bnQsIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvblN0YXR1c2VzLCBUcmFuc2FjdGlvblR5cGVzLFxufSBmcm9tICcuLi90cmFuc2FjdGlvbnMnO1xuaW1wb3J0IHsgU2NyYXBlck9wdGlvbnMsIFNjcmFwZXJDcmVkZW50aWFscyB9IGZyb20gJy4vYmFzZS1zY3JhcGVyJztcbmltcG9ydCB7IGdldERlYnVnIH0gZnJvbSAnLi4vaGVscGVycy9kZWJ1Zyc7XG5cbmNvbnN0IGRlYnVnID0gZ2V0RGVidWcoJ2hhcG9hbGltJyk7XG5cbmNvbnN0IERBVEVfRk9STUFUID0gJ1lZWVlNTUREJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmRlY2xhcmUgbmFtZXNwYWNlIHdpbmRvdyB7XG4gIGNvbnN0IGJuaHBBcHA6IGFueTtcbn1cblxuaW50ZXJmYWNlIFNjcmFwZWRUcmFuc2FjdGlvbiB7XG4gIHNlcmlhbE51bWJlcj86IG51bWJlcjtcbiAgYWN0aXZpdHlEZXNjcmlwdGlvbj86IHN0cmluZztcbiAgZXZlbnRBbW91bnQ6IG51bWJlcjtcbiAgdmFsdWVEYXRlPzogc3RyaW5nO1xuICBldmVudERhdGU/OiBzdHJpbmc7XG4gIHJlZmVyZW5jZU51bWJlcj86IG51bWJlcjtcbiAgU2NyYXBlZFRyYW5zYWN0aW9uPzogc3RyaW5nO1xuICBldmVudEFjdGl2aXR5VHlwZUNvZGU6IG51bWJlcjtcbiAgY3VycmVudEJhbGFuY2U6IG51bWJlcjtcbiAgYmVuZWZpY2lhcnlEZXRhaWxzRGF0YT86IHtcbiAgICBwYXJ0eUhlYWRsaW5lPzogc3RyaW5nO1xuICAgIHBhcnR5TmFtZT86IHN0cmluZztcbiAgICBtZXNzYWdlSGVhZGxpbmU/OiBzdHJpbmc7XG4gICAgbWVzc2FnZURldGFpbD86IHN0cmluZztcbiAgfTtcbn1cblxudHlwZSBGZXRjaGVkQWNjb3VudERhdGEgPSB7XG4gIGJhbmtOdW1iZXI6IHN0cmluZztcbiAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICBicmFuY2hOdW1iZXI6IHN0cmluZztcbiAgYWNjb3VudENsb3NpbmdSZWFzb25Db2RlOiBudW1iZXI7XG59W107XG5cbnR5cGUgRmV0Y2hlZEFjY291bnRUcmFuc2FjdGlvbnNEYXRhID0ge1xuICB0cmFuc2FjdGlvbnM6IFNjcmFwZWRUcmFuc2FjdGlvbltdO1xufTtcblxudHlwZSBCYWxhbmNlQW5kQ3JlZGl0TGltaXQgPSB7XG4gIGNyZWRpdExpbWl0QW1vdW50OiBudW1iZXI7XG4gIGNyZWRpdExpbWl0RGVzY3JpcHRpb246IHN0cmluZztcbiAgY3JlZGl0TGltaXRVdGlsaXphdGlvbkFtb3VudDogbnVtYmVyO1xuICBjcmVkaXRMaW1pdFV0aWxpemF0aW9uRXhpc3RhbmNlQ29kZTogbnVtYmVyO1xuICBjcmVkaXRMaW1pdFV0aWxpemF0aW9uUGVyY2VudDogbnVtYmVyO1xuICBjdXJyZW50QWNjb3VudExpbWl0c0Ftb3VudDogbnVtYmVyO1xuICBjdXJyZW50QmFsYW5jZTogbnVtYmVyO1xuICB3aXRoZHJhd2FsQmFsYW5jZTogbnVtYmVyO1xufTtcblxuZnVuY3Rpb24gY29udmVydFRyYW5zYWN0aW9ucyh0eG5zOiBTY3JhcGVkVHJhbnNhY3Rpb25bXSk6IFRyYW5zYWN0aW9uW10ge1xuICByZXR1cm4gdHhucy5tYXAoKHR4bikgPT4ge1xuICAgIGNvbnN0IGlzT3V0Ym91bmQgPSB0eG4uZXZlbnRBY3Rpdml0eVR5cGVDb2RlID09PSAyO1xuXG4gICAgbGV0IG1lbW8gPSAnJztcbiAgICBpZiAodHhuLmJlbmVmaWNpYXJ5RGV0YWlsc0RhdGEpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGFydHlIZWFkbGluZSxcbiAgICAgICAgcGFydHlOYW1lLFxuICAgICAgICBtZXNzYWdlSGVhZGxpbmUsXG4gICAgICAgIG1lc3NhZ2VEZXRhaWwsXG4gICAgICB9ID0gdHhuLmJlbmVmaWNpYXJ5RGV0YWlsc0RhdGE7XG4gICAgICBjb25zdCBtZW1vTGluZXM6IHN0cmluZ1tdID0gW107XG4gICAgICBpZiAocGFydHlIZWFkbGluZSkge1xuICAgICAgICBtZW1vTGluZXMucHVzaChwYXJ0eUhlYWRsaW5lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnR5TmFtZSkge1xuICAgICAgICBtZW1vTGluZXMucHVzaChgJHtwYXJ0eU5hbWV9LmApO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVzc2FnZUhlYWRsaW5lKSB7XG4gICAgICAgIG1lbW9MaW5lcy5wdXNoKG1lc3NhZ2VIZWFkbGluZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZXNzYWdlRGV0YWlsKSB7XG4gICAgICAgIG1lbW9MaW5lcy5wdXNoKGAke21lc3NhZ2VEZXRhaWx9LmApO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVtb0xpbmVzLmxlbmd0aCkge1xuICAgICAgICBtZW1vID0gbWVtb0xpbmVzLmpvaW4oJyAnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQ6IFRyYW5zYWN0aW9uID0ge1xuICAgICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWwsXG4gICAgICBpZGVudGlmaWVyOiB0eG4ucmVmZXJlbmNlTnVtYmVyLFxuICAgICAgZGF0ZTogbW9tZW50KHR4bi5ldmVudERhdGUsIERBVEVfRk9STUFUKS50b0lTT1N0cmluZygpLFxuICAgICAgcHJvY2Vzc2VkRGF0ZTogbW9tZW50KHR4bi52YWx1ZURhdGUsIERBVEVfRk9STUFUKS50b0lTT1N0cmluZygpLFxuICAgICAgb3JpZ2luYWxBbW91bnQ6IGlzT3V0Ym91bmQgPyAtdHhuLmV2ZW50QW1vdW50IDogdHhuLmV2ZW50QW1vdW50LFxuICAgICAgb3JpZ2luYWxDdXJyZW5jeTogJ0lMUycsXG4gICAgICBjaGFyZ2VkQW1vdW50OiBpc091dGJvdW5kID8gLXR4bi5ldmVudEFtb3VudCA6IHR4bi5ldmVudEFtb3VudCxcbiAgICAgIGRlc2NyaXB0aW9uOiB0eG4uYWN0aXZpdHlEZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgIHN0YXR1czogdHhuLnNlcmlhbE51bWJlciA9PT0gMCA/IFRyYW5zYWN0aW9uU3RhdHVzZXMuUGVuZGluZyA6IFRyYW5zYWN0aW9uU3RhdHVzZXMuQ29tcGxldGVkLFxuICAgICAgbWVtbyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFJlc3RDb250ZXh0KHBhZ2U6IFBhZ2UpIHtcbiAgYXdhaXQgd2FpdFVudGlsKGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gcGFnZS5ldmFsdWF0ZSgoKSA9PiAhIXdpbmRvdy5ibmhwQXBwKTtcbiAgfSwgJ3dhaXRpbmcgZm9yIGFwcCBkYXRhIGxvYWQnKTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IHtcbiAgICByZXR1cm4gd2luZG93LmJuaHBBcHAucmVzdENvbnRleHQ7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuc2xpY2UoMSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUG9hbGltWFNSRldpdGhpblBhZ2UocGFnZTogUGFnZSwgdXJsOiBzdHJpbmcsIHBhZ2VVdWlkOiBzdHJpbmcpOiBQcm9taXNlPEZldGNoZWRBY2NvdW50VHJhbnNhY3Rpb25zRGF0YSB8IG51bGw+IHtcbiAgY29uc3QgY29va2llcyA9IGF3YWl0IHBhZ2UuY29va2llcygpO1xuICBjb25zdCBYU1JGQ29va2llID0gY29va2llcy5maW5kKChjb29raWUpID0+IGNvb2tpZS5uYW1lID09PSAnWFNSRi1UT0tFTicpO1xuICBjb25zdCBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIGlmIChYU1JGQ29va2llICE9IG51bGwpIHtcbiAgICBoZWFkZXJzWydYLVhTUkYtVE9LRU4nXSA9IFhTUkZDb29raWUudmFsdWU7XG4gIH1cbiAgaGVhZGVycy5wYWdlVXVpZCA9IHBhZ2VVdWlkO1xuICBoZWFkZXJzLnV1aWQgPSB1dWlkNCgpO1xuICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnO1xuICByZXR1cm4gZmV0Y2hQb3N0V2l0aGluUGFnZTxGZXRjaGVkQWNjb3VudFRyYW5zYWN0aW9uc0RhdGE+KHBhZ2UsIHVybCwgW10sIGhlYWRlcnMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBY2NvdW50VHJhbnNhY3Rpb25zKGFwaVNpdGVVcmw6IHN0cmluZywgcGFnZTogUGFnZSwgYWNjb3VudE51bWJlcjogc3RyaW5nLCBzdGFydERhdGU6IHN0cmluZywgZW5kRGF0ZTogc3RyaW5nKSB7XG4gIGNvbnN0IHR4bnNVcmwgPSBgJHthcGlTaXRlVXJsfS9jdXJyZW50LWFjY291bnQvdHJhbnNhY3Rpb25zP2FjY291bnRJZD0ke2FjY291bnROdW1iZXJ9Jm51bUl0ZW1zUGVyUGFnZT0xNTAmcmV0cmlldmFsRW5kRGF0ZT0ke2VuZERhdGV9JnJldHJpZXZhbFN0YXJ0RGF0ZT0ke3N0YXJ0RGF0ZX0mc29ydENvZGU9MWA7XG4gIGNvbnN0IHR4bnNSZXN1bHQgPSBhd2FpdCBmZXRjaFBvYWxpbVhTUkZXaXRoaW5QYWdlKHBhZ2UsIHR4bnNVcmwsICcvY3VycmVudC1hY2NvdW50L3RyYW5zYWN0aW9ucycpO1xuXG4gIHJldHVybiBjb252ZXJ0VHJhbnNhY3Rpb25zKHR4bnNSZXN1bHQ/LnRyYW5zYWN0aW9ucyA/PyBbXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFjY291bnRCYWxhbmNlKGFwaVNpdGVVcmw6IHN0cmluZywgcGFnZTogUGFnZSwgYWNjb3VudE51bWJlcjogc3RyaW5nKSB7XG4gIGNvbnN0IGJhbGFuY2VBbmRDcmVkaXRMaW1pdFVybCA9IGAke2FwaVNpdGVVcmx9L2N1cnJlbnQtYWNjb3VudC9jb21wb3NpdGUvYmFsYW5jZUFuZENyZWRpdExpbWl0P2FjY291bnRJZD0ke2FjY291bnROdW1iZXJ9JnZpZXc9ZGV0YWlscyZsYW5nPWhlYDtcbiAgY29uc3QgYmFsYW5jZUFuZENyZWRpdExpbWl0ID0gYXdhaXQgZmV0Y2hHZXRXaXRoaW5QYWdlPEJhbGFuY2VBbmRDcmVkaXRMaW1pdD4ocGFnZSwgYmFsYW5jZUFuZENyZWRpdExpbWl0VXJsKTtcblxuICByZXR1cm4gYmFsYW5jZUFuZENyZWRpdExpbWl0Py5jdXJyZW50QmFsYW5jZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBY2NvdW50RGF0YShwYWdlOiBQYWdlLCBiYXNlVXJsOiBzdHJpbmcsIG9wdGlvbnM6IFNjcmFwZXJPcHRpb25zKSB7XG4gIGNvbnN0IHJlc3RDb250ZXh0ID0gYXdhaXQgZ2V0UmVzdENvbnRleHQocGFnZSk7XG4gIGNvbnN0IGFwaVNpdGVVcmwgPSBgJHtiYXNlVXJsfS8ke3Jlc3RDb250ZXh0fWA7XG4gIGNvbnN0IGFjY291bnREYXRhVXJsID0gYCR7YmFzZVVybH0vU2VydmVyU2VydmljZXMvZ2VuZXJhbC9hY2NvdW50c2A7XG5cbiAgZGVidWcoJ2ZldGNoaW5nIGFjY291bnRzIGRhdGEnKTtcbiAgY29uc3QgYWNjb3VudHNJbmZvID0gYXdhaXQgZmV0Y2hHZXRXaXRoaW5QYWdlPEZldGNoZWRBY2NvdW50RGF0YT4ocGFnZSwgYWNjb3VudERhdGFVcmwpIHx8IFtdO1xuICBkZWJ1ZygnZ290ICVkIGFjY291bnRzLCBmZXRjaGluZyB0eG5zIGFuZCBiYWxhbmNlJywgYWNjb3VudHNJbmZvLmxlbmd0aCk7XG5cbiAgY29uc3Qgc3RhcnRNb21lbnQgPSBtb21lbnQob3B0aW9ucy5zdGFydERhdGUpO1xuICBjb25zdCBlbmRNb21lbnQgPSBtb21lbnQob3B0aW9ucy5lbmREYXRlKTtcblxuICBjb25zdCBzdGFydERhdGVTdHIgPSBzdGFydE1vbWVudC5mb3JtYXQoREFURV9GT1JNQVQpO1xuICBjb25zdCBlbmREYXRlU3RyID0gZW5kTW9tZW50LmZvcm1hdChEQVRFX0ZPUk1BVCk7XG5cbiAgY29uc3QgYWNjb3VudHM6IFRyYW5zYWN0aW9uc0FjY291bnRbXSA9IFtdO1xuXG4gIGZvciAoY29uc3QgYWNjb3VudCBvZiBhY2NvdW50c0luZm8pIHtcbiAgICBsZXQgYmFsYW5jZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IGFjY291bnROdW1iZXIgPSBgJHthY2NvdW50LmJhbmtOdW1iZXJ9LSR7YWNjb3VudC5icmFuY2hOdW1iZXJ9LSR7YWNjb3VudC5hY2NvdW50TnVtYmVyfWA7XG5cbiAgICBjb25zdCBpc0FjdGl2ZUFjY291bnQgPSBhY2NvdW50LmFjY291bnRDbG9zaW5nUmVhc29uQ29kZSA9PT0gMDtcbiAgICBpZiAoaXNBY3RpdmVBY2NvdW50KSB7XG4gICAgICBiYWxhbmNlID0gYXdhaXQgZ2V0QWNjb3VudEJhbGFuY2UoYXBpU2l0ZVVybCwgcGFnZSwgYWNjb3VudE51bWJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdTa2lwcGluZyBiYWxhbmNlIGZvciBhIGNsb3NlZCBhY2NvdW50LCBiYWxhbmNlIHdpbGwgYmUgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdHhucyA9IGF3YWl0IGdldEFjY291bnRUcmFuc2FjdGlvbnMoYXBpU2l0ZVVybCwgcGFnZSwgYWNjb3VudE51bWJlciwgc3RhcnREYXRlU3RyLCBlbmREYXRlU3RyKTtcblxuICAgIGFjY291bnRzLnB1c2goe1xuICAgICAgYWNjb3VudE51bWJlcixcbiAgICAgIGJhbGFuY2UsXG4gICAgICB0eG5zLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgYWNjb3VudERhdGEgPSB7XG4gICAgc3VjY2VzczogdHJ1ZSxcbiAgICBhY2NvdW50cyxcbiAgfTtcbiAgZGVidWcoJ2ZldGNoaW5nIGVuZGVkJyk7XG4gIHJldHVybiBhY2NvdW50RGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9zc2libGVMb2dpblJlc3VsdHMoYmFzZVVybDogc3RyaW5nKSB7XG4gIGNvbnN0IHVybHM6IFBvc3NpYmxlTG9naW5SZXN1bHRzID0ge307XG4gIHVybHNbTG9naW5SZXN1bHRzLlN1Y2Nlc3NdID0gW1xuICAgIGAke2Jhc2VVcmx9L3BvcnRhbHNlcnZlci9Ib21lUGFnZWAsXG4gICAgYCR7YmFzZVVybH0vbmctcG9ydGFscy1idC9yYi9oZS9ob21lcGFnZWAsXG4gICAgYCR7YmFzZVVybH0vbmctcG9ydGFscy9yYi9oZS9ob21lcGFnZWBdO1xuICB1cmxzW0xvZ2luUmVzdWx0cy5JbnZhbGlkUGFzc3dvcmRdID0gW2Ake2Jhc2VVcmx9L0FVVEhFTlRJQ0FURS9MT0dPTj9mbG93PUFVVEhFTlRJQ0FURSZzdGF0ZT1MT0dPTiZlcnJvcmNvZGU9MS42JmNhbGxtZT1mYWxzZWBdO1xuICB1cmxzW0xvZ2luUmVzdWx0cy5DaGFuZ2VQYXNzd29yZF0gPSBbXG4gICAgYCR7YmFzZVVybH0vTUNQL1NUQVJUP2Zsb3c9TUNQJnN0YXRlPVNUQVJUJmV4cGlyZWREYXRlPW51bGxgLFxuICAgIC9cXC9BQk9VVFRPRVhQSVJFXFwvU1RBUlQvaSxcbiAgXTtcbiAgcmV0dXJuIHVybHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2luRmllbGRzKGNyZWRlbnRpYWxzOiBTY3JhcGVyQ3JlZGVudGlhbHMpIHtcbiAgcmV0dXJuIFtcbiAgICB7IHNlbGVjdG9yOiAnI3VzZXJDb2RlJywgdmFsdWU6IGNyZWRlbnRpYWxzLnVzZXJDb2RlIH0sXG4gICAgeyBzZWxlY3RvcjogJyNwYXNzd29yZCcsIHZhbHVlOiBjcmVkZW50aWFscy5wYXNzd29yZCB9LFxuICBdO1xufVxuXG5jbGFzcyBIYXBvYWxpbVNjcmFwZXIgZXh0ZW5kcyBCYXNlU2NyYXBlcldpdGhCcm93c2VyIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgZ2V0IGJhc2VVcmwoKSB7XG4gICAgcmV0dXJuICdodHRwczovL2xvZ2luLmJhbmtoYXBvYWxpbS5jby5pbCc7XG4gIH1cblxuICBnZXRMb2dpbk9wdGlvbnMoY3JlZGVudGlhbHM6IFNjcmFwZXJDcmVkZW50aWFscykge1xuICAgIHJldHVybiB7XG4gICAgICBsb2dpblVybDogYCR7dGhpcy5iYXNlVXJsfS9jZ2ktYmluL3BvYWx3d3djP3JlcU5hbWU9Z2V0TG9nb25QYWdlYCxcbiAgICAgIGZpZWxkczogY3JlYXRlTG9naW5GaWVsZHMoY3JlZGVudGlhbHMpLFxuICAgICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcubG9naW4tYnRuJyxcbiAgICAgIHBvc3RBY3Rpb246IGFzeW5jICgpID0+IHdhaXRGb3JSZWRpcmVjdCh0aGlzLnBhZ2UpLFxuICAgICAgcG9zc2libGVSZXN1bHRzOiBnZXRQb3NzaWJsZUxvZ2luUmVzdWx0cyh0aGlzLmJhc2VVcmwpLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBmZXRjaERhdGEoKSB7XG4gICAgcmV0dXJuIGZldGNoQWNjb3VudERhdGEodGhpcy5wYWdlLCB0aGlzLmJhc2VVcmwsIHRoaXMub3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFwb2FsaW1TY3JhcGVyO1xuIl19